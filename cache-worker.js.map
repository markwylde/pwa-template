{
  "version": 3,
  "sources": ["../node_modules/idb-keyval/dist/cjs/index.js", "../src/workers/cacheWorker.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic \u2013 if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(customStore, callback) {\n    return customStore('readonly', (store) => {\n        // This would be store.getAllKeys(), but it isn't supported by Edge or Safari.\n        // And openKeyCursor isn't supported by Safari.\n        store.openCursor().onsuccess = function () {\n            if (!this.result)\n                return;\n            callback(this.result);\n            this.result.continue();\n        };\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push(cursor.key)).then(() => items);\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push(cursor.value)).then(() => items);\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    const items = [];\n    return eachCursor(customStore, (cursor) => items.push([cursor.key, cursor.value])).then(() => items);\n}\n\nexports.clear = clear;\nexports.createStore = createStore;\nexports.del = del;\nexports.entries = entries;\nexports.get = get;\nexports.getMany = getMany;\nexports.keys = keys;\nexports.promisifyRequest = promisifyRequest;\nexports.set = set;\nexports.setMany = setMany;\nexports.update = update;\nexports.values = values;\n", "const cacheName = process.env.CACHE_VERSION;\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(cacheName).then((cache) => {\n      return cache.addAll(JSON.parse(process.env.CACHE_FILES));\n    }).then(() => {\n      self.skipWaiting();\n    })\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys()\n      .then(cacheNames => {\n        return cacheNames.filter(name => cacheName !== name);\n      })\n      .then(cachesToDelete => {\n        if (cachesToDelete.length > 0) {\n          require('idb-keyval').clear();\n        }\n        return Promise.all(cachesToDelete.map(cacheToDelete => {\n          return caches.delete(cacheToDelete);\n        }));\n      })\n      .then(() => {\n        return self.clients.claim();\n      })\n      .then(() => {\n        self.clients.matchAll().then(function (clients) {\n          clients.forEach(client => {\n            client.postMessage({\n              msg: 'pageNeedsRefresh'\n            });\n          });\n        });\n      })\n  );\n});\n\nself.addEventListener('fetch', function (event) {\n  if (!event.request.url.startsWith(self.location.origin)) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(function (response) {\n      if (response) {\n        return response;\n      }\n\n      const indexRequest = new Request('/index.html');\n      return caches.match(indexRequest);\n    })\n  );\n});\n"],
  "mappings": "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",
  "names": []
}
