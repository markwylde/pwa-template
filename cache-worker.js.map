{
  "version": 3,
  "sources": ["../node_modules/idb-keyval/dist/index.cjs", "../src/workers/cacheWorker.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction promisifyRequest(request) {\n    return new Promise((resolve, reject) => {\n        // @ts-ignore - file size hacks\n        request.oncomplete = request.onsuccess = () => resolve(request.result);\n        // @ts-ignore - file size hacks\n        request.onabort = request.onerror = () => reject(request.error);\n    });\n}\nfunction createStore(dbName, storeName) {\n    const request = indexedDB.open(dbName);\n    request.onupgradeneeded = () => request.result.createObjectStore(storeName);\n    const dbp = promisifyRequest(request);\n    return (txMode, callback) => dbp.then((db) => callback(db.transaction(storeName, txMode).objectStore(storeName)));\n}\nlet defaultGetStoreFunc;\nfunction defaultGetStore() {\n    if (!defaultGetStoreFunc) {\n        defaultGetStoreFunc = createStore('keyval-store', 'keyval');\n    }\n    return defaultGetStoreFunc;\n}\n/**\n * Get a value by its key.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction get(key, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => promisifyRequest(store.get(key)));\n}\n/**\n * Set a value with a key.\n *\n * @param key\n * @param value\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction set(key, value, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.put(value, key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Set multiple values at once. This is faster than calling set() multiple times.\n * It's also atomic \u2013 if one of the pairs can't be added, none will be added.\n *\n * @param entries Array of entries, where each entry is an array of `[key, value]`.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction setMany(entries, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        entries.forEach((entry) => store.put(entry[1], entry[0]));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Get multiple values by their keys\n *\n * @param keys\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction getMany(keys, customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => Promise.all(keys.map((key) => promisifyRequest(store.get(key)))));\n}\n/**\n * Update a value. This lets you see the old value and update it as an atomic operation.\n *\n * @param key\n * @param updater A callback that takes the old value and returns a new value.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction update(key, updater, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => \n    // Need to create the promise manually.\n    // If I try to chain promises, the transaction closes in browsers\n    // that use a promise polyfill (IE10/11).\n    new Promise((resolve, reject) => {\n        store.get(key).onsuccess = function () {\n            try {\n                store.put(updater(this.result), key);\n                resolve(promisifyRequest(store.transaction));\n            }\n            catch (err) {\n                reject(err);\n            }\n        };\n    }));\n}\n/**\n * Delete a particular key from the store.\n *\n * @param key\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction del(key, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.delete(key);\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Delete multiple keys at once.\n *\n * @param keys List of keys to delete.\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction delMany(keys, customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        keys.forEach((key) => store.delete(key));\n        return promisifyRequest(store.transaction);\n    });\n}\n/**\n * Clear all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction clear(customStore = defaultGetStore()) {\n    return customStore('readwrite', (store) => {\n        store.clear();\n        return promisifyRequest(store.transaction);\n    });\n}\nfunction eachCursor(store, callback) {\n    store.openCursor().onsuccess = function () {\n        if (!this.result)\n            return;\n        callback(this.result);\n        this.result.continue();\n    };\n    return promisifyRequest(store.transaction);\n}\n/**\n * Get all keys in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction keys(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAllKeys) {\n            return promisifyRequest(store.getAllKeys());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.key)).then(() => items);\n    });\n}\n/**\n * Get all values in the store.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction values(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        if (store.getAll) {\n            return promisifyRequest(store.getAll());\n        }\n        const items = [];\n        return eachCursor(store, (cursor) => items.push(cursor.value)).then(() => items);\n    });\n}\n/**\n * Get all entries in the store. Each entry is an array of `[key, value]`.\n *\n * @param customStore Method to get a custom store. Use with caution (see the docs).\n */\nfunction entries(customStore = defaultGetStore()) {\n    return customStore('readonly', (store) => {\n        // Fast path for modern browsers\n        // (although, hopefully we'll get a simpler path some day)\n        if (store.getAll && store.getAllKeys) {\n            return Promise.all([\n                promisifyRequest(store.getAllKeys()),\n                promisifyRequest(store.getAll()),\n            ]).then(([keys, values]) => keys.map((key, i) => [key, values[i]]));\n        }\n        const items = [];\n        return customStore('readonly', (store) => eachCursor(store, (cursor) => items.push([cursor.key, cursor.value])).then(() => items));\n    });\n}\n\nexports.clear = clear;\nexports.createStore = createStore;\nexports.del = del;\nexports.delMany = delMany;\nexports.entries = entries;\nexports.get = get;\nexports.getMany = getMany;\nexports.keys = keys;\nexports.promisifyRequest = promisifyRequest;\nexports.set = set;\nexports.setMany = setMany;\nexports.update = update;\nexports.values = values;\n", "const cacheName = process.env.CACHE_VERSION;\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(cacheName).then((cache) => {\n      return cache.addAll(JSON.parse(process.env.CACHE_FILES));\n    }).then(() => {\n      self.skipWaiting();\n    })\n  );\n});\n\nself.addEventListener('activate', event => {\n  event.waitUntil(\n    caches.keys()\n      .then(cacheNames => {\n        return cacheNames.filter(name => cacheName !== name);\n      })\n      .then(cachesToDelete => {\n        if (cachesToDelete.length > 0) {\n          require('idb-keyval').clear();\n        }\n        return Promise.all(cachesToDelete.map(cacheToDelete => {\n          return caches.delete(cacheToDelete);\n        }));\n      })\n      .then(() => {\n        return self.clients.claim();\n      })\n      .then(() => {\n        self.clients.matchAll().then(function (clients) {\n          clients.forEach(client => {\n            client.postMessage({\n              msg: 'pageNeedsRefresh'\n            });\n          });\n        });\n      })\n  );\n});\n\nself.addEventListener('fetch', function (event) {\n  if (!event.request.url.startsWith(self.location.origin)) {\n    return;\n  }\n\n  event.respondWith(\n    caches.match(event.request).then(function (response) {\n      if (response) {\n        return response;\n      }\n\n      const indexRequest = new Request('/index.html');\n      return caches.match(indexRequest);\n    })\n  );\n});\n"],
  "mappings": "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",
  "names": ["require_dist", "__commonJSMin", "exports", "promisifyRequest", "request", "resolve", "reject", "createStore", "dbName", "storeName", "dbp", "txMode", "callback", "db", "defaultGetStoreFunc", "defaultGetStore", "get", "key", "customStore", "store", "set", "value", "setMany", "entries", "entry", "getMany", "keys", "update", "updater", "err", "del", "delMany", "clear", "eachCursor", "items", "cursor", "values", "i", "cacheName", "event", "cache", "cacheNames", "name", "cachesToDelete", "cacheToDelete", "clients", "client", "response", "indexRequest"]
}
